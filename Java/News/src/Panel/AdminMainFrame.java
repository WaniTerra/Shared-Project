/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Panel;

import Objects.Comment;
import Objects.News;
import Objects.Reader;
import Objects.Users;
import Objects.Writer;
import SQL.DatabaseCodes;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.awt.Component;
import java.awt.Image;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author erens
 */
public class AdminMainFrame extends javax.swing.JFrame {

    /**
     * Creates new form AdminFrame
     */
    public AdminMainFrame() {
        initComponents();
        PublicMethods.generalLabel(labelNowUser);

        labelWriterNumber.setText("Writer Number -> " + Writer.getAllWriters().size());
        adminTable.setRowHeight(35);

        comboEdit.addItem("Name");
        comboEdit.addItem("Surname");
        comboEdit.addItem("Genre");
        comboEdit.addItem("Gender");
        comboEdit.addItem("Password");
        comboEdit.addItem("Biography");

        adminTable.getTableHeader().setResizingAllowed(false);

        comboGenre.addItem("All");
        comboGenre.addItem("Daily");
        comboGenre.addItem("Technology");
        comboGenre.addItem("Politic");
        comboGenre.addItem("Sport");
        comboGenre.addItem("Game");
        comboGenre.addItem("Movie/Tv Show");
        comboGenre.addItem("Art");

        comboWriter.addItem("All");
        for (Users allWriter : Writer.getAllWriters()) {
            comboWriter.addItem(allWriter.getName() + " " + allWriter.getSurname());
        }

        btnShowWriterActionPerformed(null);
        btnNewsDelete.setEnabled(false);
        labelWriterNumber.setText("Writer Number -> " + Writer.getAllWriters().size());
        labelNewsNumber.setText("News Number -> " + News.getAllNews().size());

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(allWriterModel);
        adminTable.setRowSorter(sorter);

        comboGenre.setSelectedIndex(0);
        comboWriter.setSelectedIndex(0);

    }

    DefaultTableModel allWriterModel = new DefaultTableModel(
            new Object[]{"Name", "Surname", "News Count", "❤️ / 👍 / 👎", "Genre", "E-Mail", "Gender"}, 0
    ) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    DefaultTableModel allNewsModel = new DefaultTableModel(
            new Object[]{"Title", "Cover Image", "Like", "Dislike", "Genres", "Publish Date", "Author"}, 0
    ) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    //With this we can add image in table
    class ImageCellRenderer extends JLabel implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            if (value instanceof ImageIcon) {
                ImageIcon image = (ImageIcon) value;
                if (image.getIconHeight() > adminTable.getRowHeight()
                        || image.getIconWidth() > adminTable.getColumnModel().getColumn(1).getWidth()) {
                    Image scaledImage = image.getImage().getScaledInstance(
                            adminTable.getColumnModel().getColumn(1).getWidth(),
                            adminTable.getRowHeight(),
                            Image.SCALE_AREA_AVERAGING
                    );
                    ImageIcon scaledImageIcon = new ImageIcon(scaledImage);
                    setIcon(scaledImageIcon);
                    setText("");
                } else {
                    setIcon(image);
                    setText("");
                }

            } else {
                setText(value != null ? value.toString() : "");
                setIcon(null);
            }
            return this;
        }
    }

    private boolean showsWriter = true;
    private boolean showsAdmin = false;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        adminTable = new javax.swing.JTable();
        btnNewWriter = new javax.swing.JButton();
        btnWriterDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        labelFiltreWriter = new javax.swing.JLabel();
        btnShowWriter = new javax.swing.JButton();
        btnNewsDelete = new javax.swing.JButton();
        btnShowNews = new javax.swing.JButton();
        labelWriterNumber = new javax.swing.JLabel();
        labelNewsNumber = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        comboEdit = new javax.swing.JComboBox<>();
        txtEdit = new javax.swing.JTextField();
        openShows = new javax.swing.JButton();
        labelNewsConrtol = new javax.swing.JLabel();
        labelFiltreControl = new javax.swing.JLabel();
        labelFiltreGenre = new javax.swing.JLabel();
        labelNowUser = new javax.swing.JLabel();
        comboGenre = new javax.swing.JComboBox<>();
        comboWriter = new javax.swing.JComboBox<>();
        labelMain = new javax.swing.JLabel();
        labelWriterControl1 = new javax.swing.JLabel();
        btnAdminPage = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(700, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(710, 630));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        adminTable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        adminTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        adminTable.setToolTipText("");
        adminTable.setRowHeight(25);
        jScrollPane1.setViewportView(adminTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 700, 270));

        btnNewWriter.setText("New Writer");
        btnNewWriter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewWriterActionPerformed(evt);
            }
        });
        getContentPane().add(btnNewWriter, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 420, -1, -1));

        btnWriterDelete.setText("Delete");
        btnWriterDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWriterDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnWriterDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 104, -1));

        btnEdit.setText("Edit ");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        getContentPane().add(btnEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 500, 93, -1));

        labelFiltreWriter.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelFiltreWriter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelFiltreWriter.setText("Writer");
        getContentPane().add(labelFiltreWriter, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 490, 170, 30));

        btnShowWriter.setText("Show Writers");
        btnShowWriter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowWriterActionPerformed(evt);
            }
        });
        getContentPane().add(btnShowWriter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, -1, -1));

        btnNewsDelete.setText("Delete");
        btnNewsDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWriterDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnNewsDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 420, 104, -1));

        btnShowNews.setText("Show News");
        btnShowNews.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowNewsActionPerformed(evt);
            }
        });
        getContentPane().add(btnShowNews, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 380, 104, -1));

        labelWriterNumber.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelWriterNumber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelWriterNumber.setText("Writer Number");
        getContentPane().add(labelWriterNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 370, 190, 46));

        labelNewsNumber.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelNewsNumber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNewsNumber.setText("News Number");
        getContentPane().add(labelNewsNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 370, 150, 46));

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Adsız.png"))); // NOI18N
        btnBack.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBack.setBorderPainted(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, 40));

        getContentPane().add(comboEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 500, 100, -1));
        getContentPane().add(txtEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 460, 100, -1));

        openShows.setText("Open News");
        openShows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openShowsActionPerformed(evt);
            }
        });
        getContentPane().add(openShows, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 420, 100, -1));

        labelNewsConrtol.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        labelNewsConrtol.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNewsConrtol.setText("News Control");
        getContentPane().add(labelNewsConrtol, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 330, 170, 46));

        labelFiltreControl.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        labelFiltreControl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelFiltreControl.setText("Filtre Control");
        getContentPane().add(labelFiltreControl, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 450, 170, 50));

        labelFiltreGenre.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelFiltreGenre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelFiltreGenre.setText("Genre");
        getContentPane().add(labelFiltreGenre, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 480, 160, 50));

        labelNowUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(labelNowUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 530, 710, 40));

        comboGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboGenreActionPerformed(evt);
            }
        });
        getContentPane().add(comboGenre, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 520, 100, -1));

        comboWriter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboWriterActionPerformed(evt);
            }
        });
        getContentPane().add(comboWriter, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 520, 100, -1));

        labelMain.setFont(new java.awt.Font("Segoe UI Black", 1, 36)); // NOI18N
        labelMain.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMain.setText("DolicHenus News");
        getContentPane().add(labelMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, -4, 710, 70));

        labelWriterControl1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        labelWriterControl1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelWriterControl1.setText("Writer Control");
        getContentPane().add(labelWriterControl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 330, 180, 46));

        btnAdminPage.setBackground(new java.awt.Color(255, 0, 51));
        btnAdminPage.setForeground(new java.awt.Color(255, 255, 255));
        btnAdminPage.setText("Admin");
        btnAdminPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminPageActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdminPage, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 460, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed

        if (showsWriter && adminTable.getSelectedRow() != -1) {

            int selectedRow = adminTable.getSelectedRow();
            String selectedField = comboEdit.getSelectedItem().toString().trim();
            String newValue = txtEdit.getText().trim();

            if (newValue.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please Enter a Value.");
                return;
            }

            String email = adminTable.getValueAt(selectedRow, 5).toString().trim();

            for (int j = 0; j < Writer.getAllWriters().size(); j++) {
                if (Writer.getAllWriters().get(j).getEmail().trim().equals(email)) {
                    Writer tempWriter = (Writer) Writer.getAllWriters().get(j);

                    switch (selectedField) {
                        case "Name":

                            DatabaseCodes.dbToWriterAttributeChanger(tempWriter, "Name", newValue);
                            tempWriter.setName(newValue);
                            adminTable.setValueAt(newValue, selectedRow, 0);
                            break;

                        case "Surname":

                            DatabaseCodes.dbToWriterAttributeChanger(tempWriter, "Surname", newValue);
                            tempWriter.setSurname(newValue);
                            adminTable.setValueAt(newValue, selectedRow, 1);
                            break;

                        case "Genre":

                            DatabaseCodes.dbToWriterAttributeChanger(tempWriter, "Genre", newValue);
                            tempWriter.setFavoriteGenre(newValue);
                            adminTable.setValueAt(newValue, selectedRow, 4);
                            break;

                        case "Gender":

                            DatabaseCodes.dbToWriterAttributeChanger(tempWriter, "Gender", newValue);
                            tempWriter.setGender(newValue);
                            adminTable.setValueAt(newValue, selectedRow, 6);
                            break;

                        case "Password":

                            DatabaseCodes.dbToWriterAttributeChanger(tempWriter, "Password", newValue);
                            tempWriter.setPassword(newValue);

                            break;

                        case "Biography":

                            DatabaseCodes.dbToWriterAttributeChanger(tempWriter, "Biography", newValue);
                            tempWriter.setBiography(newValue);

                            break;

                        default:

                            return;
                    }

                    Writer.getAllWriters().set(j, tempWriter);

                    txtEdit.setText("");
                    break;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please choose a row.");
        }


    }//GEN-LAST:event_btnEditActionPerformed

    private void btnShowWriterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowWriterActionPerformed

        allWriterModel.setRowCount(0);

        adminTable.revalidate();
        adminTable.repaint();

        adminTable.setModel(allWriterModel);
        showsWriter = true;
        btnEdit.setEnabled(true);
        btnNewWriter.setEnabled(true);
        btnWriterDelete.setEnabled(true);
        comboEdit.setEnabled(true);
        txtEdit.setEnabled(true);
        openShows.setEnabled(false);

        btnNewsDelete.setEnabled(false);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(allWriterModel);
        adminTable.setRowSorter(sorter);

        comboGenre.setSelectedIndex(comboGenre.getSelectedIndex());
        comboWriter.setSelectedIndex(comboWriter.getSelectedIndex());

        tableWriterForNews(filterGenre, filterWriter, allNewsModel);
        tableWriterForWriter(filterGenre, filterWriter, allWriterModel);
    }//GEN-LAST:event_btnShowWriterActionPerformed

    private void btnNewWriterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewWriterActionPerformed
        if (showsWriter) {
            SigninFrame rs = new SigninFrame("writer");
            rs.setVisible(true);
            rs.setLocationRelativeTo(this);

            this.dispose();
        }
    }//GEN-LAST:event_btnNewWriterActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        PublicMethods.accountClear();
        LoginFrame logIn = new LoginFrame("admin");

        logIn.setVisible(true);
        logIn.setLocationRelativeTo(this);
        logIn.getBtnSıgnIn().setVisible(false);
        logIn.getBtnSıgnIn().setEnabled(false);

        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnWriterDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWriterDeleteActionPerformed
        if (showsWriter) {
            int[] selectedViewRows = adminTable.getSelectedRows();

            if (selectedViewRows.length > 0) {
                int[] selectedModelRows = new int[selectedViewRows.length];
                ArrayList<String> mailsToRemove = new ArrayList<>();

                for (int i = 0; i < selectedViewRows.length; i++) {
                    int viewRow = selectedViewRows[i];
                    selectedModelRows[i] = adminTable.convertRowIndexToModel(viewRow);
                    String tempMail = adminTable.getValueAt(viewRow, 5).toString();
                    mailsToRemove.add(tempMail);
                }
                //Delete area
                ArrayList<Users> writerList = new ArrayList<>(Writer.getAllWriters());
                for (String mail : mailsToRemove) {
                    Iterator<Users> writerIterator = writerList.iterator();
                    while (writerIterator.hasNext()) {
                        Users user = writerIterator.next();
                        if (user.getEmail().trim().equals(mail.trim())) {
                            Writer writer = (Writer) user;

                            ArrayList<News> newsToProcess = new ArrayList<>(writer.getNews());
                            for (News news : newsToProcess) {

                                ArrayList<Comment> commentsToDelete = new ArrayList<>();
                                for (Comment comment : Comment.getAllComments()) {
                                    if (news.getNewsComments().contains(comment)) {
                                        commentsToDelete.add(comment);
                                    }
                                }

                                ArrayList<Users> readerList = new ArrayList<>(Reader.getAllReaders());
                                for (Users readerUser : readerList) {
                                    Reader reader = (Reader) readerUser;

                                    if (reader.getLikedNews().contains(news)) {
                                        DatabaseCodes.likedNewsToReaderDb(news, reader, false);
                                        reader.getLikedNews().remove(news);
                                    }
                                    if (reader.getDislikedNews().contains(news)) {
                                        DatabaseCodes.dislikedNewsToReaderDb(news, reader, false);
                                        reader.getDislikedNews().remove(news);
                                    }

                                    for (Comment comment : commentsToDelete) {
                                        DatabaseCodes.dbCommentDeleter(comment.getCommentId(), reader.getEmail(), comment);
                                    }
                                }

                                for (Comment comment : commentsToDelete) {
                                    Comment.commentDeleter(comment.getCommentId(), news);
                                    News.updateNewsReaction(news.getNewsId(), "-comment", comment);
                                    Comment.getAllComments().remove(comment);
                                }

                                news.getNewsComments().clear();

                                News.deleteNews(news);
                                DatabaseCodes.dbWriterNewsChanger(news, writer, false);
                                News.getAllNews().remove(news);
                            }

                            writer.getNews().clear();

                            ArrayList<Users> allReaders = new ArrayList<>(Reader.getAllReaders());
                            for (Users readerUser : allReaders) {
                                Reader reader = (Reader) readerUser;
                                if (reader.getFavoriteWriters().contains(writer)) {
                                    reader.getFavoriteWriters().remove(writer);
                                    DatabaseCodes.favoriteWriterToReaderDb(writer, reader, false);
                                }
                            }

                            News.saveAllNewsToFile();

                            DatabaseCodes.dbWriterDeleter(writer);

                             DatabaseCodes.callDeleter();
                            
                                
                            Writer.getAllWriters().remove(writer);
                            Users.getAllUsers().remove(writer);

                            writerIterator.remove();
                            break;
                        }
                    }
                }

                DefaultTableModel model = (DefaultTableModel) adminTable.getModel();
                for (int i = selectedModelRows.length - 1; i >= 0; i--) {
                    model.removeRow(selectedModelRows[i]);
                }
                //Delete writer from comboBox
                comboWriter.removeAllItems();
                comboWriter.addItem("All");
                for (Users allWriter : Writer.getAllWriters()) {
                    comboWriter.addItem(allWriter.getName() + " " + allWriter.getSurname());
                }

                labelWriterNumber.setText("Writer Number -> " + Writer.getAllWriters().size());
            }
        } else {
            int[] selectedViewRows = adminTable.getSelectedRows();

            if (selectedViewRows.length > 0) {

                for (int i = selectedViewRows.length - 1; i >= 0; i--) {
                    int selectedViewRow = selectedViewRows[i];
                    int selectedModelRow = adminTable.convertRowIndexToModel(selectedViewRow);
                    String title = adminTable.getValueAt(selectedViewRow, 0).toString();
                    Writer writer = PublicMethods.writerFinderbyTitle(title);
                    boolean newsFound = false;
                    //Delete area
                    for (News news : News.getAllNews()) {
                        if (news.getTitle().equals(title)) {
                            
                            //CollectComments
                            ArrayList<Comment> commentsToDelete = new ArrayList<>();
                            for (Comment comment : Comment.getAllComments()) {
                                if (news.getNewsComments().contains(comment)) {
                                    commentsToDelete.add(comment);
                                    
                                }
                            }
                            
                            //It will delete news from readers array
                            for (Users user : Reader.getAllReaders()) {
                                Reader reader = (Reader) user;
                                if (reader.getLikedNews().contains(news)) {
                                    DatabaseCodes.likedNewsToReaderDb(news, reader, false);
                                    reader.getLikedNews().remove(news);
                                }
                                if (reader.getDislikedNews().contains(news)) {
                                    DatabaseCodes.dislikedNewsToReaderDb(news, reader, false);
                                    reader.getDislikedNews().remove(news);
                                }
                                for (Comment comment : commentsToDelete) {
                                    DatabaseCodes.dbCommentDeleter(comment.getCommentId(), reader.getEmail(), comment);
                                    Comment.commentDeleter(comment.getCommentId(), news);
                                    News.updateNewsReaction(news.getNewsId(), "-comment", comment);
                                }
                            }
                            
                            News.deleteNews(news);
                            DatabaseCodes.dbWriterNewsChanger(news, writer, false);
                            writer.getNews().remove(news);
                            News.getAllNews().remove(news);
                            newsFound = true;
                            break;
                        }
                    }
                    DatabaseCodes.callDeleter();
                    
                    if (newsFound) {
                        DefaultTableModel model = (DefaultTableModel) adminTable.getModel();
                        model.removeRow(selectedModelRow);
                    }

                }

            }
        }
        labelNewsNumber.setText("News Number -> " + News.getAllNews().size());
    }//GEN-LAST:event_btnWriterDeleteActionPerformed

    private void btnShowNewsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowNewsActionPerformed
        adminTable.setModel(allNewsModel);
        adminTable.getColumn("Cover Image").setCellRenderer(new ImageCellRenderer());
        showsWriter = false;
        btnEdit.setEnabled(false);
        btnNewWriter.setEnabled(false);
        btnWriterDelete.setEnabled(false);
        comboEdit.setEnabled(false);
        txtEdit.setEnabled(false);
        btnNewsDelete.setEnabled(true);
        openShows.setEnabled(true);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(allNewsModel);
        adminTable.setRowSorter(sorter);

        comboGenre.setSelectedIndex(comboGenre.getSelectedIndex());
        comboWriter.setSelectedIndex(comboWriter.getSelectedIndex());

    }//GEN-LAST:event_btnShowNewsActionPerformed


    private void openShowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openShowsActionPerformed
        int[] rows = adminTable.getSelectedRows();

        int[] selectedModelRows = new int[rows.length];

        for (int i = 0; i < rows.length; i++) {
            selectedModelRows[i] = adminTable.convertRowIndexToModel(rows[i]);
        }
        NewsFrame.setAdminRead(true);
        for (int i = 0; i < selectedModelRows.length; i++) {
            int realIndex = selectedModelRows[i];

            NewsFrame nf = new NewsFrame(allNewsModel.getValueAt(realIndex, 0).toString(), null);
            nf.setVisible(true);
            nf.setLocationRelativeTo(this);

        }


    }//GEN-LAST:event_openShowsActionPerformed
    private String filterGenre = "All";
    private String filterWriter = "All";
    private void comboGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboGenreActionPerformed
        if (comboGenre.getSelectedItem() != null && comboWriter.getSelectedItem() != null) {
            filterGenre = comboGenre.getSelectedItem().toString();
            filterWriter = comboWriter.getSelectedItem().toString();

            tableWriterForNews(filterGenre, filterWriter, allNewsModel);

            tableWriterForWriter(filterGenre, filterWriter, allWriterModel);

        }
    }//GEN-LAST:event_comboGenreActionPerformed

    private void comboWriterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboWriterActionPerformed
        if (comboGenre.getSelectedItem() != null && comboWriter.getSelectedItem() != null) {
            filterGenre = comboGenre.getSelectedItem().toString();
            filterWriter = comboWriter.getSelectedItem().toString();

            tableWriterForNews(filterGenre, filterWriter, allNewsModel);
            tableWriterForWriter(filterGenre, filterWriter, allWriterModel);

        }
    }//GEN-LAST:event_comboWriterActionPerformed

    private void btnAdminPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminPageActionPerformed
        AdminFrame af = new AdminFrame();
        af.setVisible(true);
        af.setLocationRelativeTo(this);
        this.dispose();

    }//GEN-LAST:event_btnAdminPageActionPerformed

    public void tableWriterForNews(String filterGenre, String filterWriter, DefaultTableModel table) {
        if (filterGenre.equals("All") && filterWriter.equals("All")) {
            table.setRowCount(0);
            adminTable.revalidate();
            adminTable.repaint();
            ArrayList<News> allNews = News.getAllNews();
            if (!showsWriter) {
                PublicMethods.tableWriterForNews(adminTable, allNews, table);
            }
            newsNumber = allNews.size();
            labelNewsNumber.setText("News Number -> " + newsNumber);
            labelWriterNumber.setText("Writer Number -> " + writerNumber);
        } else {
            table.setRowCount(0);
            adminTable.revalidate();
            adminTable.repaint();
            ArrayList<News> filteredAllNews = PublicMethods.filtreApplyerForNews(filterGenre, filterWriter);
            if (!showsWriter) {
                PublicMethods.tableWriterForNews(adminTable, filteredAllNews, table);
            }
            newsNumber = filteredAllNews.size();
            labelNewsNumber.setText("News Number -> " + newsNumber);
            labelWriterNumber.setText("Writer Number -> " + writerNumber);
        }

    }

    public void tableWriterForWriter(String filterGenre, String filterWriter, DefaultTableModel table) {
        if (filterGenre.equals("All") && filterWriter.equals("All")) {
            table.setRowCount(0);
            adminTable.revalidate();
            adminTable.repaint();
            ArrayList<Users> allWriter = Writer.getAllWriters();
            if (showsWriter) {
                PublicMethods.tableWriterForWriter(adminTable, allWriter, table, filterGenre);
            }
            writerNumber = allWriter.size();
            labelWriterNumber.setText("Writer Number -> " + writerNumber);
            labelNewsNumber.setText("News Number -> " + newsNumber);
        } else {
            table.setRowCount(0);
            adminTable.revalidate();
            adminTable.repaint();
            ArrayList<Users> filteredAllWriter = PublicMethods.filtreApplyerForWriter(filterGenre, filterWriter);
            if (showsWriter) {
                PublicMethods.tableWriterForWriter(adminTable, filteredAllWriter, table, filterGenre);
            }
            writerNumber = filteredAllWriter.size();
            labelWriterNumber.setText("Writer Number -> " + writerNumber);
            labelNewsNumber.setText("News Number -> " + newsNumber);
        }

    }

    private int writerNumber = 0;
    private int newsNumber = 0;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable adminTable;
    private javax.swing.JButton btnAdminPage;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNewWriter;
    private javax.swing.JButton btnNewsDelete;
    private javax.swing.JButton btnShowNews;
    private javax.swing.JButton btnShowWriter;
    private javax.swing.JButton btnWriterDelete;
    private javax.swing.JComboBox<String> comboEdit;
    private javax.swing.JComboBox<String> comboGenre;
    private javax.swing.JComboBox<String> comboWriter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelFiltreControl;
    private javax.swing.JLabel labelFiltreGenre;
    private javax.swing.JLabel labelFiltreWriter;
    private javax.swing.JLabel labelMain;
    private javax.swing.JLabel labelNewsConrtol;
    private javax.swing.JLabel labelNewsNumber;
    private javax.swing.JLabel labelNowUser;
    private javax.swing.JLabel labelWriterControl1;
    private javax.swing.JLabel labelWriterNumber;
    private javax.swing.JButton openShows;
    private javax.swing.JTextField txtEdit;
    // End of variables declaration//GEN-END:variables
}
