/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Panel;

import Objects.*;
import SQL.DatabaseCodes;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Insets;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author erens
 */
public class ReaderFrame extends javax.swing.JFrame {

    /**
     * Creates new form ReaderFrame
     */
    public ReaderFrame() {
        initComponents();
        PublicMethods.generalLabel(labelNowUser);

        for (Users allReaders : Reader.getAllReaders()) {
            nowReader = (Reader) allReaders;
            if (nowReader.getEmail().equals(MainFrame.getEmail())) {
                break;
            }

        }

        comboGenre.addItem("All");
        comboGenre.addItem("Daily");
        comboGenre.addItem("Technology");
        comboGenre.addItem("Politic");
        comboGenre.addItem("Sport");
        comboGenre.addItem("Game");
        comboGenre.addItem("Movie/Tv Shows");
        comboGenre.addItem("Art");
        //It will make red if they are reader's favourite genres.
        comboGenre.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index,
                    boolean isSelected, boolean cellHasFocus) {
                Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                if (index >= 0 && nowReader.getFavoriteGenres().contains(value)) {
                    c.setForeground(Color.RED);
                } else {
                    c.setForeground(Color.BLACK);
                }

                return c;
            }
        });

        comboWriter.addItem("All");
        for (Users allWriter : Writer.getAllWriters()) {
            comboWriter.addItem(allWriter.getName() + " " + allWriter.getSurname());
        }

        comboGenre.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index,
                    boolean isSelected, boolean cellHasFocus) {
                Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                if (index >= 0 && nowReader.getFavoriteGenres().contains(value)) {
                    c.setForeground(Color.RED);
                } else {
                    c.setForeground(Color.BLACK);
                }

                return c;
            }
        });

        for (Users allReaders : Reader.getAllReaders()) {
            Reader reader = (Reader) allReaders;
            if (reader.getEmail().equals(MainFrame.getEmail())) {
                Image scaledImage = DatabaseCodes.byteArrayToImageIcon(reader.getProfilPhoto()).getImage().getScaledInstance(btnProfil.getWidth(), btnProfil.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon scaledIcon = new ImageIcon(scaledImage);
                btnProfil.setIcon(scaledIcon);
                break;
            }
        }

        profilPane.setVisible(false);
        tableNew.setVisible(false);
        tableNew.setRowHeight(25);

        btnProfil.setBorderPainted(false);
        btnProfil.setMargin(new Insets(0, 0, 0, 0));
        btnProfil.setContentAreaFilled(false);
        btnProfil.setFocusPainted(false);

    }

    //Area for editting list with filtres
    public void listWriter(String filterGenre, String filterWriter, DefaultListModel list) {
        if (filterGenre.equals("All") && filterWriter.equals("All")) {
            list.removeAllElements();
            ArrayList<News> allNews = News.getAllNews();
            PublicMethods.populateNewsList(listNews, allNews, list);
        } else {
            list.removeAllElements();
            ArrayList<News> filteredAllNews = PublicMethods.filtreApplyerForNews(filterGenre, filterWriter);
            PublicMethods.populateNewsList(listNews, filteredAllNews, list);
        }

    }

    private DefaultListModel listModel = new DefaultListModel();
    private String filterGenre = "All";
    private String filterWriter = "All";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listNews = new javax.swing.JList();
        labelFiltre = new javax.swing.JLabel();
        comboGenre = new javax.swing.JComboBox<>();
        labelFiltreGenre = new javax.swing.JLabel();
        comboWriter = new javax.swing.JComboBox<>();
        labelFiltreWriter = new javax.swing.JLabel();
        btnProfil = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        labelMain = new javax.swing.JLabel();
        profilPane = new javax.swing.JPanel();
        dislikeNews = new javax.swing.JButton();
        likeNews = new javax.swing.JButton();
        favWriter = new javax.swing.JButton();
        scrollTable = new javax.swing.JScrollPane();
        tableNew = new javax.swing.JTable();
        labelNowUser = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(700, 600));
        setPreferredSize(new java.awt.Dimension(710, 630));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        listNews.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listNewsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listNews);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 60, 460, 510));

        labelFiltre.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        labelFiltre.setText("Filters");
        getContentPane().add(labelFiltre, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 80, 92, 42));

        comboGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboGenreActionPerformed(evt);
            }
        });
        getContentPane().add(comboGenre, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 136, 120, 30));

        labelFiltreGenre.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        labelFiltreGenre.setText("Genre");
        getContentPane().add(labelFiltreGenre, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 130, -1, -1));

        comboWriter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboWriterActionPerformed(evt);
            }
        });
        getContentPane().add(comboWriter, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 186, 120, 30));

        labelFiltreWriter.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        labelFiltreWriter.setText("Writer");
        getContentPane().add(labelFiltreWriter, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 180, -1, -1));

        btnProfil.setText("Profil");
        btnProfil.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnProfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProfilActionPerformed(evt);
            }
        });
        getContentPane().add(btnProfil, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 510, 110, 90));

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/AdsÄ±z.png"))); // NOI18N
        btnBack.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBack.setBorderPainted(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, 40));

        labelMain.setFont(new java.awt.Font("Segoe UI Black", 1, 36)); // NOI18N
        labelMain.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMain.setText("DolicHenus News");
        getContentPane().add(labelMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, -4, 710, 70));

        profilPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dislikeNews.setText("DislikeNews");
        dislikeNews.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dislikeNewsActionPerformed(evt);
            }
        });
        profilPane.add(dislikeNews, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 100, 120));

        likeNews.setText("LikeNews");
        likeNews.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                likeNewsActionPerformed(evt);
            }
        });
        profilPane.add(likeNews, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 100, 120));

        favWriter.setText("FavWriter");
        favWriter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                favWriterActionPerformed(evt);
            }
        });
        profilPane.add(favWriter, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 210, 120));

        tableNew.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableNew.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableNewMouseClicked(evt);
            }
        });
        scrollTable.setViewportView(tableNew);

        profilPane.add(scrollTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 210, 250));

        getContentPane().add(profilPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 250, 210, 250));

        labelNowUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(labelNowUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 560, 700, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        PublicMethods.accountClear();
        LoginFrame logIn = new LoginFrame();

        logIn.setVisible(true);
        logIn.setLocationRelativeTo(this);
        logIn.getBtnSÄ±gnIn().setVisible(true);
        logIn.getBtnSÄ±gnIn().setEnabled(true);

        this.dispose();

    }//GEN-LAST:event_btnBackActionPerformed

    //News opener
    private void listNewsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listNewsValueChanged
        int index = listNews.getSelectedIndex();

        if (index != -1) {
            NewsFrame newFrame = new NewsFrame(listModel.getElementAt(index).toString(), ReaderFrame.this);
            newFrame.setVisible(true);
            newFrame.setLocationRelativeTo(this);
            listNews.clearSelection();
            index = -1;
        }

    }//GEN-LAST:event_listNewsValueChanged

    private void comboGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboGenreActionPerformed
        if (comboGenre.getSelectedItem() != null && comboWriter.getSelectedItem() != null) {
            filterGenre = comboGenre.getSelectedItem().toString();
            filterWriter = comboWriter.getSelectedItem().toString();
            listWriter(filterGenre, filterWriter, listModel);
        }
    }//GEN-LAST:event_comboGenreActionPerformed

    private void comboWriterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboWriterActionPerformed
        if (comboGenre.getSelectedItem() != null && comboWriter.getSelectedItem() != null) {
            filterGenre = comboGenre.getSelectedItem().toString();
            filterWriter = comboWriter.getSelectedItem().toString();
            listWriter(filterGenre, filterWriter, listModel);
        }
    }//GEN-LAST:event_comboWriterActionPerformed
    private boolean openProfil = false;
    private void btnProfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProfilActionPerformed
        if (!openProfil) {

            for (Users allReaders : Reader.getAllReaders()) {
                nowReader = (Reader) allReaders;
                if (nowReader.getEmail().equals(MainFrame.getEmail())) {

                    profilPane.setVisible(true);
                    tableNew.setVisible(false);
                    scrollTable.setVisible(false);
                    openProfil = true;
                    break;
                }
            }

        } else {
            profilPane.setVisible(false);
            tableNew.setVisible(true);
            scrollTable.setVisible(true);
            favWriter.setVisible(true);
            likeNews.setVisible(true);
            dislikeNews.setVisible(true);
            openProfil = false;

        }

        favButtonActivated = false;


    }//GEN-LAST:event_btnProfilActionPerformed

    private Reader nowReader = null;
    private boolean favButtonActivated = false;

    private void favWriterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_favWriterActionPerformed
        likeI = 0;
        dislikeI = 0;
        favWriterTableWriter();
        favWriter.setVisible(false);
        likeNews.setVisible(false);
        dislikeNews.setVisible(false);
        tableNew.setModel(favouriteWriters);

        tableNew.setVisible(true);
        scrollTable.setVisible(true);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(favouriteWriters);
        tableNew.setRowSorter(sorter);

        favButtonActivated = true;
    }//GEN-LAST:event_favWriterActionPerformed

    public void favWriterTableWriter() {
        favouriteWriters.setRowCount(0);
        for (Writer writers : nowReader.getFavoriteWriters()) {

            favouriteWriters.addRow(new Object[]{writers.getName() + " " + writers.getSurname(), writers.getNews().size()});

        }
    }

    private int likeI = 0;

    private void likeNewsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_likeNewsActionPerformed
        //If the button is pressed once the images do not load, so I actuate it as if the button was pressed twice.
        for (int i = 0; i < 2; i++) {
            dislikeI = 0;
            likeNewsTableWriter();

            favWriter.setVisible(false);
            likeNews.setVisible(false);
            dislikeNews.setVisible(false);
            tableNew.setVisible(true);
            scrollTable.setVisible(true);

            TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(likedNews);
            tableNew.setRowSorter(sorter);
            tableNew.getColumnModel().getColumn(1).setCellRenderer(new ImageCellRenderer());

            tableNew.setModel(likedNews);
            //This is for prevent errors because of images
            if (likeI == 0) {
                btnProfilActionPerformed(null);
                btnProfilActionPerformed(null);

                likeI++;
            }
        }

    }//GEN-LAST:event_likeNewsActionPerformed

    public void likeNewsTableWriter() {
        likedNews.setRowCount(0);
        for (News news : nowReader.getLikedNews()) {

            Writer writer = PublicMethods.writerFinderbyTitle(news.getTitle());
            likedNews.addRow(new Object[]{news.getTitle(), news.getHeaderImage(), writer.getName() + " " + writer.getSurname()});

        }
    }

    private int dislikeI = 0;
    private void dislikeNewsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dislikeNewsActionPerformed
        //If the button is pressed once the images do not load, so I actuate it as if the button was pressed twice.
        for (int i = 0; i < 2; i++) {
            likeI = 0;
            dislikeNewsTableWriter();
            favWriter.setVisible(false);
            likeNews.setVisible(false);
            dislikeNews.setVisible(false);
            tableNew.setVisible(true);
            scrollTable.setVisible(true);

            TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(dislikedNews);
            tableNew.setRowSorter(sorter);
            tableNew.getColumnModel().getColumn(1).setCellRenderer(new ImageCellRenderer());

            tableNew.setModel(dislikedNews);
            //This is for prevent errors because of images
            if (dislikeI == 0) {
                btnProfilActionPerformed(null);
                btnProfilActionPerformed(null);

                dislikeI++;
            }
        }

    }//GEN-LAST:event_dislikeNewsActionPerformed

    public void dislikeNewsTableWriter() {
        dislikedNews.setRowCount(0);
        for (News news : nowReader.getDislikedNews()) {
            Writer writer = PublicMethods.writerFinderbyTitle(news.getTitle());

            dislikedNews.addRow(new Object[]{news.getTitle(), news.getHeaderImage(), writer.getName() + " " + writer.getSurname()});

        }
    }

    //Open News 
    private void tableNewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableNewMouseClicked
        int selected = tableNew.getSelectedRow();
        int selectedModelRows = tableNew.convertRowIndexToModel(selected);
        String title = "";
        if (selectedModelRows != -1 && !favButtonActivated) {
            if (likedNews.equals(tableNew.getModel())) {

                title = likedNews.getValueAt(selectedModelRows, 0).toString();
            } else {

                title = dislikedNews.getValueAt(selectedModelRows, 0).toString();
            }

            NewsFrame newFrame = new NewsFrame(title, ReaderFrame.this);
            newFrame.setVisible(true);
            newFrame.setLocationRelativeTo(this);
            listNews.clearSelection();
            selectedModelRows = -1;
        } else {
            comboGenre.setSelectedIndex(0);
            comboWriter.setSelectedItem(favouriteWriters.getValueAt(selectedModelRows, 0));
            comboWriterActionPerformed(null);
        }


    }//GEN-LAST:event_tableNewMouseClicked

    DefaultTableModel favouriteWriters = new DefaultTableModel(
            new Object[]{"          â¤ ðï¸ï¸", "News Count"}, 0
    ) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    DefaultTableModel likedNews = new DefaultTableModel(
            new Object[]{"    ð ð", "      ð¼ï¸", "      ð"}, 0
    ) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    DefaultTableModel dislikedNews = new DefaultTableModel(
            new Object[]{"    ð ð", "      ð¼ï¸", "      ð"}, 0
    ) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    //Profil area table image placer
    class ImageCellRenderer extends JLabel implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            if (value instanceof ImageIcon) {
                ImageIcon image = (ImageIcon) value;
                if (image.getIconHeight() > tableNew.getRowHeight()
                        || image.getIconWidth() > tableNew.getColumnModel().getColumn(1).getWidth()) {
                    Image scaledImage = image.getImage().getScaledInstance(
                            tableNew.getColumnModel().getColumn(1).getWidth(),
                            tableNew.getRowHeight(),
                            Image.SCALE_AREA_AVERAGING
                    );
                    ImageIcon scaledImageIcon = new ImageIcon(scaledImage);
                    setIcon(scaledImageIcon);
                    setText("");
                } else {
                    setIcon(image);
                    setText("");
                }

            } else {
                setText(value != null ? value.toString() : "");
                setIcon(null);
            }
            return this;
        }
    }

    public DefaultListModel getListModel() {
        return listModel;
    }

    public String getFilterGenre() {
        return filterGenre;
    }

    public String getFilterWriter() {
        return filterWriter;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReaderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReaderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReaderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReaderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReaderFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnProfil;
    private javax.swing.JComboBox<String> comboGenre;
    private javax.swing.JComboBox<String> comboWriter;
    private javax.swing.JButton dislikeNews;
    private javax.swing.JButton favWriter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelFiltre;
    private javax.swing.JLabel labelFiltreGenre;
    private javax.swing.JLabel labelFiltreWriter;
    private javax.swing.JLabel labelMain;
    private javax.swing.JLabel labelNowUser;
    private javax.swing.JButton likeNews;
    private javax.swing.JList listNews;
    private javax.swing.JPanel profilPane;
    private javax.swing.JScrollPane scrollTable;
    private javax.swing.JTable tableNew;
    // End of variables declaration//GEN-END:variables
}
